<%
var isVector = /Vector<([^<^>]+)>/
var extractVector = /(?:Vector<){0,1}([^<^>]+)(?:>){0,1}/
var isFlag = /flags.([0-9]{1,})\?(.+)/
function genSchema(schemas) {
    var final = ''
    var head = 0
    schemas.forEach((line) => {
        if (typeof line == 'string') {
            if (line === '---types---') head = 0
            else if (line === '---functions---') head = 1
            final += line + '\n'
        } else {
            var gline = `<a href="./${head == 0 ? 'constructor/' + line.predicate : 'method/' + line.method}.md">${head == 0 ? line.predicate : line.method}</a>#${line.id} `
            line.params.forEach((param) => {
                gline += `${param.name}:`
                gline += `${writeType(param.type)} `
            })
            gline += `= ${writeType(line.type)};\n`
            final += gline
        }
    })
    return final
}
function writeType(type) {
    var target_type = ""
    if (type === 'X' && type === '#' && type === '!X') return type
    if (isFlag.test(type)) {
        var flagrun = isFlag.exec(type)
        target_type = `flags.${flagrun[1]}?`
        var strip_flag = flagrun[2]
    } else strip_flag = type
    if (isVector.test(strip_flag)) {
        var vectorrun = extractVector.exec(strip_flag)
        var strip_vector = vectorrun[1]
        target_type += `Vector&lt;`
        var is_vector = true
    } else {
        var is_vector = false
        strip_vector = strip_flag
    }
    target_type += `<a href="./type/${strip_vector}.md">${strip_vector}</a>`
    if (is_vector) target_type += `&gt;`
    return target_type
}
-%>
# Current TL-schema

Below you will find [the current TL-schema](schema.tl). 

See also the [detailed schema in JSON Â»](schema.json)

<pre>
<%- genSchema(schemas) %>
</pre>