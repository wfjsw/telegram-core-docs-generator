<%
var isVector = /Vector<([^<^>]+)>/
var extractVector = /(?:Vector<){0,1}([^<^>]+)(?:>){0,1}/
var isFlag = /flags.([0-9]{1,})\?(.+)/
function genSchema(constructors, methods) {
    var generated = ``
    if (constructors && constructors.length > 0)
    constructors.forEach((line) => {
        var gline = `<a href="../constructor/${line.predicate}.md">${line.predicate}</a>#${line.id} `
        line.params.forEach((param) => {
            gline += `${param.name}:`
            gline += `${writeType(param.type)} `
        })
        gline += `= ${writeType(line.type)};\n`
        generated += gline
    })
    if (methods && methods.length > 0) {
        generated += '\n---functions---\n'
        methods.forEach((method) => {
            var gline = `<a href="../method/${method.method}.md">${method.method}</a>#${method.id} `
            method.params.forEach((param) => {
                gline += `${param.name}:`
                gline += `${writeType(param.type)} `
            })
            gline += `= ${writeType(method.type)};\n`
            generated += gline
        })
    }
    return generated
}
function writeType(type) {
    var target_type = ""
    if (type === 'X' && type === '#' && type === '!X') return type
    if (isFlag.test(type)) {
        var flagrun = isFlag.exec(type)
        target_type = `flags.${flagrun[1]}?`
        var strip_flag = flagrun[2]
    } else strip_flag = type
    if (isVector.test(strip_flag)) {
        var vectorrun = extractVector.exec(strip_flag)
        var strip_vector = vectorrun[1]
        target_type += `Vector&lt;`
        var is_vector = true
    } else {
        var is_vector = false
        strip_vector = strip_flag
    }
    target_type += `<a href="../type/${strip_vector}.md">${strip_vector}</a>`
    if (is_vector) target_type += `&gt;`
    return target_type
}
-%>
# <%= type %>

<%= description %>

<pre>
<%- genSchema(constructors, methods) %>
</pre>

<% if (constructors.length > 0) { -%>
## Constructors

| Name | Description |
|------|-------------|
<% constructors.forEach((cons) => { -%>
| [<%= cons.predicate %>](../constructor/<%= cons.predicate %>.md) | <%= cons.description %> |
<% })} -%>

<% if (methods.length > 0) { -%>
## Methods

| Name | Description |
|------|-------------|
<% methods.forEach((mets) => { -%>
| [<%= mets.method %>](../method/<%= mets.method %>.md) | <%= mets.description %> |
<% })} -%>
